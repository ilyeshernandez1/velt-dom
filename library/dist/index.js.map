{"version":3,"sources":["../src/index.ts","../src/lib/reactive.ts","../src/lib/setReactivity.ts"],"sourcesContent":["export * from './lib/reactive'\r\nexport * from './types/reactive.types';\r\nexport * from './lib/setReactivity'\r\nexport * from './types/setReactivity.types'","import { Listener, ReactiveState } from \"../types/reactive.types\";\r\n\r\n/**\r\n * Creates a reactive state with an initial value.\r\n *\r\n * @template T - The type of the reactive state.\r\n * @param {T} initialValue - The initial value of the reactive state.\r\n * @returns {ReactiveState<T>} The reactive state object.\r\n */\r\nexport function reactive<T>(initialValue: T): ReactiveState<T> {\r\n    let value: T = initialValue;\r\n    const listeners: Listener<T>[] = [];\r\n\r\n    const state: ReactiveState<T> = {\r\n        /**\r\n         * Gets the current value of the reactive state.\r\n         * @type {T}\r\n         */\r\n        get value() {\r\n            return value;\r\n        },\r\n        /**\r\n         * Subscribes a listener function to be called when the state changes.\r\n         * @param {Listener<T>} listener - The listener function.\r\n         */\r\n        subscribe(listener: Listener<T>) {\r\n            listeners.push(listener);\r\n        },\r\n    };\r\n\r\n    const handler = {\r\n        set(target: any, prop: string, newValue: T) {\r\n            if (value !== newValue) {\r\n                value = newValue;\r\n                listeners.forEach((listener) => listener(newValue));\r\n            }\r\n            return true;\r\n        },\r\n    };\r\n\r\n    return new Proxy(state, handler);\r\n}\r\n","import { ReactiveState } from \"../types/reactive.types\";\r\nimport { DependentState } from \"../types/setReactivity.types\";\r\n\r\n\r\n\r\n/**\r\n * Sets reactivity within an HTML container by replacing {{}} tags with values from reactive dependencies.\r\n *\r\n * @template T - The type of reactive dependencies.\r\n * @param {HTMLElement | null} container - The HTML element where reactivity should be activated.\r\n * @param {DependentState<T>[]} dependencies - The list of reactive dependencies.\r\n */\r\nexport function setReactivity<T extends Object>(container: HTMLElement | null, dependencies: DependentState<T>[]) {\r\n    if (container === null) {\r\n        container = document.body;\r\n    }\r\n\r\n    const templateHTML = container.innerHTML;\r\n\r\n    /**\r\n     * Updates the view by replacing {{}} tags with values from reactive dependencies.\r\n     */\r\n    const updateView = () => {\r\n        const updatedHTML = interpolate(templateHTML, dependencies);\r\n        container!.innerHTML = updatedHTML;\r\n    }\r\n\r\n    updateView();\r\n\r\n    dependencies.forEach((dep) => {\r\n        dep.state.subscribe(updateView);\r\n    });\r\n}\r\n\r\n/**\r\n * Interpolates text by replacing {{}} tags with values from reactive dependencies.\r\n *\r\n * @template T - The type of reactive dependencies.\r\n * @param {string} text - The text with tags to be replaced.\r\n * @param {DependentState<T>[]} dependencies - The list of reactive dependencies.\r\n * @returns {string} The text with tags replaced by values from dependencies.\r\n */\r\nfunction interpolate<T extends Object>(text: string, dependencies: DependentState<T>[]) {\r\n    return text.replace(/{{\\s*([^}\\s]+)\\s*}}/g, (match, prop) => {\r\n        const dependency = dependencies.find((d) => d.name === prop);\r\n        if (dependency) {\r\n            return dependency.state.value.toString();\r\n        }\r\n        return match;\r\n    });\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACSO,SAAS,SAAY,cAAmC;AAC3D,MAAI,QAAW;AACf,QAAM,YAA2B,CAAC;AAElC,QAAM,QAA0B;AAAA;AAAA;AAAA;AAAA;AAAA,IAK5B,IAAI,QAAQ;AACR,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,UAAU,UAAuB;AAC7B,gBAAU,KAAK,QAAQ;AAAA,IAC3B;AAAA,EACJ;AAEA,QAAM,UAAU;AAAA,IACZ,IAAI,QAAa,MAAc,UAAa;AACxC,UAAI,UAAU,UAAU;AACpB,gBAAQ;AACR,kBAAU,QAAQ,CAAC,aAAa,SAAS,QAAQ,CAAC;AAAA,MACtD;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,SAAO,IAAI,MAAM,OAAO,OAAO;AACnC;;;AC7BO,SAAS,cAAgC,WAA+B,cAAmC;AAC9G,MAAI,cAAc,MAAM;AACpB,gBAAY,SAAS;AAAA,EACzB;AAEA,QAAM,eAAe,UAAU;AAK/B,QAAM,aAAa,MAAM;AACrB,UAAM,cAAc,YAAY,cAAc,YAAY;AAC1D,cAAW,YAAY;AAAA,EAC3B;AAEA,aAAW;AAEX,eAAa,QAAQ,CAAC,QAAQ;AAC1B,QAAI,MAAM,UAAU,UAAU;AAAA,EAClC,CAAC;AACL;AAUA,SAAS,YAA8B,MAAc,cAAmC;AACpF,SAAO,KAAK,QAAQ,wBAAwB,CAAC,OAAO,SAAS;AACzD,UAAM,aAAa,aAAa,KAAK,CAAC,MAAM,EAAE,SAAS,IAAI;AAC3D,QAAI,YAAY;AACZ,aAAO,WAAW,MAAM,MAAM,SAAS;AAAA,IAC3C;AACA,WAAO;AAAA,EACX,CAAC;AACL;","names":[]}